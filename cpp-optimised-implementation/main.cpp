#include <NTL/ZZ.h>
#include <NTL/ZZ_pE.h>
#include <NTL/ZZ_pX.h>

#include "montgomery.hpp"
#include "fp2.hpp"


void test_fp2_arith()
{
    std::cout << "Testing Fp2 arithmetic" << std::endl;
    NTL::ZZ p(103);
    NTL::ZZ_p::init(p);

    fp2_elem a{NTL::ZZ_p(12), NTL::ZZ_p(10)};
    fp2_elem b{NTL::ZZ_p(42), NTL::ZZ_p(3)};

    fp2_elem a_sqr{NTL::ZZ_p(44), NTL::ZZ_p(34)};
    fp2_elem apb{NTL::ZZ_p(54), NTL::ZZ_p(13)};
    fp2_elem amb{NTL::ZZ_p(73), NTL::ZZ_p(7)};
    fp2_elem ab_inv{NTL::ZZ_p(43), NTL::ZZ_p(83)};
    assert (Fp2_sqr(a) == a_sqr);
    assert (Fp2_add(a, b) == apb);
    assert (Fp2_sub(a, b) == amb);
    assert (Fp2_div(a, b) == ab_inv);
    std::cout << "  Success!" << std::endl;
}

void test_ec_params_1024()
{
    std::cout << "Testing EC arithmetic" << std::endl;
    //prime
    NTL::ZZ p;
    NTL::conv(p, "15922486913903522274738876334491173327471544233065982291422062886364771917539984633619947369979657884209891416505022976305949903782081999018601968658399212422459232014682162496366184150793214330561748936802196212819401893052051149876176865225396801900263676014808365383967944863381855436796098378947797615849584416454584458385591707302057385868132351");
    NTL::ZZ_p::init(p);

    NTL::ZZ_p A_0, A_1;
    NTL::conv(A_0, "9441462816738741402523832537038431675206053350665219869672459087171062099050012989213043047665999028842373979097626520609601732380406921502704227010948378677950926261216650604354277728513533256911748160796963384290747601854926112699155094011097433046522801436239578500871867010454362628828348179469507729212239950281818700688002010280955291469956886");
    NTL::conv(A_1, "15393241905357780709372343104273255578766701851965068876871056094205683936179533072517368856268240772747198173948856812668384523024263411280876291237727157314158232913760703417823150763000262604626224666643383569371303859527030199684944864642126660891277353825688615660864404467715468043674393179676397294278005826873824264231827260686176208366387282");

    ProjA A{{A_0, A_1}, Fp2_one()};

    fp2_elem c{NTL::ZZ_p(5), NTL::ZZ_p(123)};

    //Test with not affine coordinates
    A.first = Fp2_mul(A.first, c);
    A.second = Fp2_mul(A.second, c);

    NTL::ZZ_p P_0, P_1, Q_0, Q_1;
    NTL::conv(P_0, "14353701636938821171268290034267352062667169181353268795745398786626800083112523144224085987276394943940114921776742915472447262366134254351465161855824290101604810851963442952666271126102715267831160381957691661718732833320323215498147280327312431699906161752162724892491384348021562186350185200344926940962876984099715078485709541696511025013871874");
    NTL::conv(P_1, "13692625063031617304072917414100364081604020586987836950101409447375090066391794517475456676670992812502879343162870450112555441794037987957420674396340461768063238307539820033779965081766507198354708822499721313102032148883606970184198503348910022722136637844345546957865325968904005063794577157912954791182986726863396668863043030093031129072418794");
    NTL::conv(Q_0, "13197046818621393400637866126002431448715786102131685694567310625416128489590739496840294126332244465917256862647739935484253127529788253353399219289314626834748076843292749404382106180682806429417436894803444395677399845356301491965460073482388139378276527852378069019511676347253106914935557840835364161531881770516756489360964336428573389894471789");
    NTL::conv(Q_1, "9379799174354683183851730564075159641730480528368169906513795773509842845874924428667197315012818042126078716799949923128810646468842452222818715283846506810948318691352938206138182228131619622789184730037674829264109024343971815756783711885709450128357574153996255066012329094766118369891196808930710533609852112792785092108194068537959716112817579");
    
    xPoint P{{P_0, P_1}, Fp2_one()};
    xPoint Q{{Q_0, Q_1}, Fp2_one()};

    NTL::ZZ pow_2_517 = NTL::power_ZZ(2, 517);
    
    xPoint Pi = P;

    assert (!(IsIdentity(xMUL(P, pow_2_517, A))));
    assert (!(IsIdentity(xMUL(Q, pow_2_517, A))));

    assert ((IsIdentity(xMUL(P, pow_2_517*2, A))));
    assert ((IsIdentity(xMUL(Q, pow_2_517*2, A))));

    std::cout << "  Success!" << std::endl;
}

int main()
{
    test_fp2_arith();
    test_ec_params_1024();
    return 0;
}