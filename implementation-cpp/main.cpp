#include <random>

#include <NTL/ZZ.h>
#include <NTL/ZZ_pE.h>
#include <NTL/ZZ_pX.h>

#include "ec.hpp"
#include "ecp.hpp"
#include "isog.hpp"
#include "scallop.hpp"

void test_ec_basic()
{
    std::cout << "Testing various ec stuff" << std::endl;
    NTL::ZZ_p::init(NTL::ZZ(1019));
    NTL::ZZ_pX f;
    SetCoeff(f, 2);
    f[0] = NTL::ZZ_p(1);
    NTL::ZZ_pE::init(f);

    ec E(NTL::ZZ_pE(0), NTL::ZZ_pE(1));
    std::cout << "Curve E: " << E << std::endl;
    NTL::ZZ_pE j = E.j_invariant();
    std::cout << "j(E): " << j << std::endl;
    ec newE = ec::from_j(j);
    std::cout << "Curve E with same j: " << E << std::endl;

    ecp P = E.random_point();
    std::cout << "Point: " << P << std::endl;


    ecp Q = E.random_point();
    std::cout << "Point: " << Q << std::endl;

    ecp S = (P+Q);
    std::cout << "P+Q: " << S.normalized() << std::endl;
    ecp S51 = 51*S;
    S51.normalize();
    std::cout << "51*(P+Q): " << S51 << std::endl;

    std::cout << "  > Test passed!" << std::endl;
}

void test_ec_params_1024()
{
    //prime
    NTL::ZZ p;
    NTL::conv(p, "15922486913903522274738876334491173327471544233065982291422062886364771917539984633619947369979657884209891416505022976305949903782081999018601968658399212422459232014682162496366184150793214330561748936802196212819401893052051149876176865225396801900263676014808365383967944863381855436796098378947797615849584416454584458385591707302057385868132351");
    NTL::ZZ_p::init(p);

    //Fp2
    NTL::ZZ_pX f;
    SetCoeff(f, 2);
    f[0] = NTL::ZZ_p(1);
    NTL::ZZ_pE::init(f);

    //curve parameters
    NTL::ZZ_pX a_poly;
    SetCoeff(a_poly, 1);
    NTL::ZZ_p a_poly_0, a_poly_1;
    NTL::conv(a_poly_0, "8182779847624990280833208053971120101691446249969988601637831586738613785413048705473219912810604063601162742526785113417931003296259683040137210985875347748352230431756183594194682596254846400784661360914572682957355961736891238377541458160260412290375848039573029495193183287803460906153875156699113595514119744739884617481107518511518151618137675");
    NTL::conv(a_poly_1, "13518832704890855085291108948318404645660144198574044074479138817969284662189216035846999288734126279384132575524344272931183451804757771778639492188683979236966680575476469815815411759820402989671171645494328817476397823050245648115765473224907752027403299650411406555542703269247724941654669317323655252164198887836589625154119786875106245548415756");
    a_poly[0] = a_poly_0;
    a_poly[1] = a_poly_1;

    NTL::ZZ_pX b_poly;
    SetCoeff(b_poly, 1);
    NTL::ZZ_p b_poly_0, b_poly_1;
    NTL::conv(b_poly_0, "8622969436291911495414556046698692951374620761114690928313717985284378098181607753980933893826133159520635159429887163472103758042388364761583616046595703265426061349793025871576808304538867802834746287518344933357530284029446603564064458389021272145782463272910078324110377604070644549218323613151665534479907241720280206540256719356297866768909578");
    NTL::conv(b_poly_1, "11702159191038374481659231778582748941584233816963131825733161687677340263372884966514409095724549540948320692928001288270748558793177664458287429888137201611257945542663908196580640519170935846279521126825307273115677639859720566238869319437445036547929991461075280892785632319060724469631467141419270299416220832257296984693417652567241575230704703");
    b_poly[0] = b_poly_0;
    b_poly[1] = b_poly_1;

    NTL::ZZ_pE a, b;
    NTL::conv(a, a_poly);
    NTL::conv(b, b_poly);

    ec E(a, b);
    std::cout << "Curve E: " << E << std::endl;
    std::cout << "j(E): " << E.j_invariant() << std::endl;

    //orientation generator
    NTL::ZZ_pX Px_poly, Qx_poly;
    SetCoeff(Px_poly, 1);
    SetCoeff(Qx_poly, 1);

    NTL::ZZ_p Px_poly_0, Px_poly_1;
    NTL::conv(Px_poly_0, "9053823088425090281128254632930094587100505647127005717443412796391443396591588351445664684735548843766859689438367128391275986244518252959719773263485703317274257232679416189955911400924789832954543144754808133406679392760754265152265476125941463644612075735206788165402390982336228219499008587087355607076658589242773356703491039665622349281708407");
    NTL::conv(Px_poly_1, "8908954749483655920060338110262894129140305566371700486376772008651029087579644887287077096228999386254594948038652951222714222029084543056377089468215589676887629419911137382576817766282408512690758264018329165713924165948065028051056156799615068881172815682751732286870904231091870475261363925175640148241046598475623997656624504896824940542165226");
    Px_poly[0] = Px_poly_0;
    Px_poly[1] = Px_poly_1;

    NTL::ZZ_p Qx_poly_0, Qx_poly_1;
    NTL::conv(Qx_poly_0, "15181710370708257362649622938866472467265347494347960949298427651901581782427330946488999800685105287573643810309328777734136843482308214085151746844335462977809528964580935940824525818187714641745744417608495194376897505212125667604056625384857345766736283387384272890036737544817404758960718781586488395109584149620017523369438771926039642587702400");
    NTL::conv(Qx_poly_1, "12872091896149250339486374854267267568408305786723509831443308613149848324372168026389213776331286494788686564023743742867400628142865246796726248002425335445342843384005016551134476543358599097949380303406617875742710613041710967425892316378362474507763282978260878019842465395946503862700655151292823034104044656479451818337978961934827932677844996");
    Qx_poly[0] = Qx_poly_0;
    Qx_poly[1] = Qx_poly_1;

    NTL::ZZ_pE Px, Qx;
    NTL::conv(Px, Px_poly);
    NTL::conv(Qx, Qx_poly);

    auto P_up = E.lift_x(Px);
    assert (P_up);
    ecp P = *P_up;

    auto Q_up = E.lift_x(Qx);
    assert (Q_up);
    ecp Q = *Q_up;
    
    ecp S = (P+Q);

    NTL::ZZ pow_2_517 = NTL::power_ZZ(2, 517);

    std::cout << "P: " << P << std::endl;
    std::cout << "Q: " << Q << std::endl;
    std::cout << "S: " << S << std::endl;

    std::cout << "2**517*P: " << pow_2_517*P << std::endl;
    std::cout << "2**517*Q: " << pow_2_517*Q << std::endl;
    std::cout << "2**517*S: " << pow_2_517*S << std::endl;

    std::cout << "2**518*P: " << (pow_2_517*2)*P << std::endl;
    std::cout << "2**518*Q: " << (pow_2_517*2)*Q << std::endl;
    std::cout << "2**518*S: " << (pow_2_517*2)*S << std::endl;

    std::cout << "lin dep??: " << (pow_2_517*P == pow_2_517*Q) << std::endl;

    std::vector<int> strat{256,128,64,32,17,9,5,3,2,1,1,1,1,2,1,1,1,4,2,1,1,1,2,1,1,8,4,2,1,1,1,2,1,1,4,2,1,1,2,1,1,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,32,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,64,32,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,32,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,128,64,32,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,32,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,64,32,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,32,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,16,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1,8,4,2,1,1,2,1,1,4,2,1,1,2,1,1};

    isog_2_chain phi_1{P, strat};
    std::cout << "j(E1): " << phi_1.get_codomain().j_invariant() << std::endl;

    isog_2_chain phi_2{Q, strat};
    std::cout << "j(E2): " << phi_2.get_codomain().j_invariant() << std::endl;

    ecp Qm = E.completeBasis(2, 518, Q);
    std::cout << "completed_basis" << std::endl;

    std::cout << "should have order 2: " << pow_2_517*phi_2(Qm) << std::endl;

    isog_2_chain phi_2_dual{phi_2(Qm), strat};
    std::cout << "done" << std::endl;
    std::cout << "j(E_backagain): " << phi_2_dual.get_codomain().j_invariant() << std::endl;
    std::cout << (phi_2_dual.get_codomain() == E) << std::endl;

    isomorphism isom_1(std::make_shared<const ec>(phi_1.get_codomain()), std::make_shared<const ec>(phi_2.get_codomain()));
    isomorphism isom_2(std::make_shared<const ec>(phi_2_dual.get_codomain()), std::make_shared<const ec>(E));

    ecp R = E.random_point();
    std::cout << "R: " << R << std::endl;
    std::cout << "omega(R) + 5R: " << isom_2(phi_2_dual(isom_1(phi_1(R)))) + 5*R << std::endl;
}

std::vector<int> GenSecret(size_t length, int N) {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<int> dis(-N, N);

    std::vector<int> vec(length);
    for (int i = 0; i < length; ++i) {
        vec[i] = dis(gen);
    }
    return vec;
}

void test_pearlscallop_1024() 
{
    //prime
    NTL::ZZ p;
    NTL::conv(p, "15922486913903522274738876334491173327471544233065982291422062886364771917539984633619947369979657884209891416505022976305949903782081999018601968658399212422459232014682162496366184150793214330561748936802196212819401893052051149876176865225396801900263676014808365383967944863381855436796098378947797615849584416454584458385591707302057385868132351");
    NTL::ZZ_p::init(p);

    //Fp2
    NTL::ZZ_pX f;
    SetCoeff(f, 2);
    f[0] = NTL::ZZ_p(1);
    NTL::ZZ_pE::init(f);

    //curve parameters
    NTL::ZZ_pX a_poly;
    SetCoeff(a_poly, 1);
    NTL::ZZ_p a_poly_0, a_poly_1;
    NTL::conv(a_poly_0, "8182779847624990280833208053971120101691446249969988601637831586738613785413048705473219912810604063601162742526785113417931003296259683040137210985875347748352230431756183594194682596254846400784661360914572682957355961736891238377541458160260412290375848039573029495193183287803460906153875156699113595514119744739884617481107518511518151618137675");
    NTL::conv(a_poly_1, "13518832704890855085291108948318404645660144198574044074479138817969284662189216035846999288734126279384132575524344272931183451804757771778639492188683979236966680575476469815815411759820402989671171645494328817476397823050245648115765473224907752027403299650411406555542703269247724941654669317323655252164198887836589625154119786875106245548415756");
    a_poly[0] = a_poly_0;
    a_poly[1] = a_poly_1;

    NTL::ZZ_pX b_poly;
    SetCoeff(b_poly, 1);
    NTL::ZZ_p b_poly_0, b_poly_1;
    NTL::conv(b_poly_0, "8622969436291911495414556046698692951374620761114690928313717985284378098181607753980933893826133159520635159429887163472103758042388364761583616046595703265426061349793025871576808304538867802834746287518344933357530284029446603564064458389021272145782463272910078324110377604070644549218323613151665534479907241720280206540256719356297866768909578");
    NTL::conv(b_poly_1, "11702159191038374481659231778582748941584233816963131825733161687677340263372884966514409095724549540948320692928001288270748558793177664458287429888137201611257945542663908196580640519170935846279521126825307273115677639859720566238869319437445036547929991461075280892785632319060724469631467141419270299416220832257296984693417652567241575230704703");
    b_poly[0] = b_poly_0;
    b_poly[1] = b_poly_1;

    NTL::ZZ_pE a, b;
    NTL::conv(a, a_poly);
    NTL::conv(b, b_poly);

    ec E(a, b);

    //orientation generator
    NTL::ZZ_pX Px_poly, Qx_poly;
    SetCoeff(Px_poly, 1);
    SetCoeff(Qx_poly, 1);

    NTL::ZZ_p Px_poly_0, Px_poly_1;
    NTL::conv(Px_poly_0, "9053823088425090281128254632930094587100505647127005717443412796391443396591588351445664684735548843766859689438367128391275986244518252959719773263485703317274257232679416189955911400924789832954543144754808133406679392760754265152265476125941463644612075735206788165402390982336228219499008587087355607076658589242773356703491039665622349281708407");
    NTL::conv(Px_poly_1, "8908954749483655920060338110262894129140305566371700486376772008651029087579644887287077096228999386254594948038652951222714222029084543056377089468215589676887629419911137382576817766282408512690758264018329165713924165948065028051056156799615068881172815682751732286870904231091870475261363925175640148241046598475623997656624504896824940542165226");
    Px_poly[0] = Px_poly_0;
    Px_poly[1] = Px_poly_1;

    NTL::ZZ_p Qx_poly_0, Qx_poly_1;
    NTL::conv(Qx_poly_0, "15181710370708257362649622938866472467265347494347960949298427651901581782427330946488999800685105287573643810309328777734136843482308214085151746844335462977809528964580935940824525818187714641745744417608495194376897505212125667604056625384857345766736283387384272890036737544817404758960718781586488395109584149620017523369438771926039642587702400");
    NTL::conv(Qx_poly_1, "12872091896149250339486374854267267568408305786723509831443308613149848324372168026389213776331286494788686564023743742867400628142865246796726248002425335445342843384005016551134476543358599097949380303406617875742710613041710967425892316378362474507763282978260878019842465395946503862700655151292823034104044656479451818337978961934827932677844996");
    Qx_poly[0] = Qx_poly_0;
    Qx_poly[1] = Qx_poly_1;

    NTL::ZZ_pE Px, Qx;
    NTL::conv(Px, Px_poly);
    NTL::conv(Qx, Qx_poly);

    auto P_up = E.lift_x(Px);
    assert (P_up);
    ecp P = *P_up;

    auto Q_up = E.lift_x(Qx);
    assert (Q_up);
    ecp Q = *Q_up;

    std::vector<int> ells{7,13,23,29,47,61,73,79,89,97,137,139,151,167,181,193,199,223,239,241,257,281,311,317,331,349,353,367,373,397,401,409,419,421,433,457,461,463,487,499,509,541,547,569,571,577,587,593,617,619,631,641,659,691,719,727,739,743,751,757,761,773,787,797,827,829,853,857,863,881,941,953,967,971,977};
    std::vector<int> es = GenSecret(75, 5);

    auto PQ_A = GroupAction(P, Q, ells, es);
}

int main()
{
    test_ec_basic();
    //test_ec_params_1024();
    test_pearlscallop_1024();
    return 0;
}