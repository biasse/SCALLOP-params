from deuring.broker import starting_curve
from deuring.correspondence import constructive_deuring

def isIsomorphic(O1, O2):
    I = connectingIdeal(O1, O2)
    for alpha in ReducedBasis(I):
        if alpha.reduced_norm() == I.norm():
            return True
    return False

def connectingIdeal(O1, O2):
    I = O1*O2
    I *= I.norm().denominator()
    return I

def ReducedBasis(I):
    def _matrix_to_gens(M, B):
        return [sum(c * g for c, g in zip(row, B)) for row in M]
    
    def gram_matrix(basis):
        M = []
        for a in basis:
            M.append([QQ(2) * a.pair(b) for b in basis])
        return Matrix(QQ, M)

    B = I.basis()
    G = gram_matrix(I.basis())
    U = G.LLL_gram().transpose()
    reduced_basis_elements = _matrix_to_gens(U, B)
    return reduced_basis_elements

proof.all(False)

p = 4114534055211428858209763614504410563117701662267362937138137095586936058053761704842156133975358905714291000507768794648473124720678019767543502087984105654039860176528637932566910494321588571084727940922746613867782136100904100899254907911401022219784668284602450834434561264189531655905496525890573382474959042286886123544723208330612164409523725883983605918613518273414945403217222161064894795280154916448207951095491621077495805609660640803620150293725576124452440320886343175508418100084863559079428799766681877685071383771673711806607518344260958541082058104638843060207642392140545208993133008939248313207931109695817894592511
e = 762

F2.<i> = GF((p, 2), modulus=[1,0,1])
E0, iota, O0 = starting_curve(F2)

P = E0.lift_x(3974281682631593906875742217335740072498802804934583532855290614575861997677444044386254276534200921122104246745455342954665502984294840794062624008022844691147723178543357328856244261700721430059658469700260303138310521829540353992837787096140598509439435011543578237963216438204062982224671846063551479050250512252118742009166357731162242071656159150818040549292893603705957515031726946537356376283821003150909101059606999054904591397694874831045787298814220791100938397178939808298753336330478548759571223178623711978075430250074594009944264178059801908659383780704347285433114552692919685340922563068920685608959744495986462443834*i + 4100688930147354863743046138562403720967009479209283519345417719600720408740959162040241826837092778631507517918511783847027034742371206343540050112492155426046413907589367039602495996053485921356913849379752345781668132874528446551866412117129351760941173090951883664592613124257871854602516220491359407553016926711842747443482032320135291903289751503911578046300258632716198510852264143815925788984514543822554404626760236323073327472082807555686927957613506973973633548986869917138187272170231506511456758890585057226447790614607312553137147308444786985221494112707426551865537219390479271737260971902271019176035562039367335913342)
Q = E0.lift_x(3358687014163330856842540575726796426568044816878664131761013152210169695492613561812618816855504431274863801878306071338956502076644956756260758761880175791936573266120201975700006489551009575441324880992636341741383069399704154600434802436593497874229345374352058043884335954816363156065271104558019645255946942907294182812955741401098792165207961303441907708335492061235687215327069912521751457141972529738840770385606750842525319648558570701727227240149186427643494657688595472615378854110632524870165622265441858809115814346881724650384878258128290495383625812805342971640245836733863766560166511816810652261394560731231983389593*i + 1987594482338082882599909601305282491350423242988192841930139358215117413447581531177990041345754937632123835139871799866214950424807364776740931647860557514942836956308278730072810038295723065647641638689784369846748037778954587672270491686613257465247485047782278253152471397778205357949180181546829505764598767588557120719855410834466409294707779866813642851664829289422284752042382081722258421774593151145750286877374369485815513909158633690733862790711135131284454894057569254547866893876502248509466991754199923795670308337190349705307687368864941742830769220317586732030841049371614021830959362259885145157069132878920371161432)
B = O0.quaternion_algebra()
i, j, k = B.gens()

omega = 1832827684332475215473523438232831309177774886978512535974698570911369604699151107875446121559074470856162325880745766383242293239553824886289089398891540880222569935499346998589048849203406574145521169540424917988523539271567833574172297078821253610246946076670772916648107040797719390100519790897627262641282454683649730371689854402668571027616943858763342329950228548282868159012438018581416850038531760014452514324869538461260930969465953785455634366396271982746348423500078414182266292377619470577014647990002429998847200610475363634076413706320343626150729214765910589216653630468185680660416651415730334493810319468061039986231/3703584420421317772483294103983984255788644734551181071445961422091673356197739035533621198296498218136732562553643079540487416747623473599096681055653087036614392281291272719588162948853126099350338685863004191436628396431348500141676038247223060499481736762111223449615927880771118388904338240885264262053314220103524721239065994213298001420173261209173635603910579337964619493127940829684644326179340588525*i + 577318789112374288731069338708962744800035755084063208244645707003475694872724830357211154684448651819240797511899715514232221175608208266997793081271105980251679704130151626737974805502813285894624623687640151408452377622431233690685912573035187136796161775531716097653740352167242352102278190884840433045574550224/2664244134028040843246810572124292774432935547084635262930092016004288415350573039006077372674548231277687661851672626308972918449891608055420684203196651075503103200898400424994739936460377581977746091389370883994274107267533002957093258466595061027303464238444395610996799441173318592672605951114025223995932845531692683540954756873606133499200609168340016706563292852970756562716352647447026974311575*j + 558646372121734059507028928074482530274313966907240927861306687817085216423327801840711268784017043659326050790375375624524784612660645296275727620261206673128649618230276107943299097161651841251933674882191827700428401688656183423711867926885794574409063334599723688079849269769992909917961291100827337384114586430583/6441016383341422213014424528667798705719382147045532298166889429724649315126502670493254257906953422846491413136770573113891159561084301911472488792440151368025030054419604729718544258875001911913632497153050767715875472054519130681175718690822713912142150890628214694984222401341075458964066505887416107918807339310477776067940859501387828556823062972475888006801007544286294770657288399451555349877114067*k
path = 3703584420421317772483294103983984255788644734551181071445961422091673356197739035533621198296498218136732562553643079540487416747623473599096681055653087036614392281291272719588162948853126099350338685863004191436628396431348500141676038247223060499481736762111223449615927880771118388904338240885264262053314220103524721239065994213298001420173261209173635603910579337964619493127940829684644326179340588525

w = 19086769594710305957479658851316502070038121206500346144568806255427709054642899899552063491995584993331593399986913140812754447230564684801247389937557608054790951503629749489741455198170946951717020050611071188339934920597600736 + omega

"""
I = O0*path + O0*(omega*path)

O = I.right_order()

I_o1 = O*w + O*(2**e)
I_o2 = O*w.conjugate() + O*(2**e)

for alpha in ReducedBasis(I_o1.conjugate()*I_o2):
    print(alpha.reduced_norm() == 2**(2*e))

assert I_o1.norm() == 2**e
assert I_o2.norm() == 2**e

J_o1 = I*I_o1 + O0*(2**e)
J_o2 = I*I_o2 + O0*(2**e)

xP = constructive_deuring(J_o1, E0, iota, p, retGen=True)
print(xP)
xQ = constructive_deuring(J_o2, E0, iota, p, retGen=True)
print(xQ)

assert False
"""

#Divide out the worst factors to bruteforce later
I = O0*(path) + O0*(omega*path)
E1, phi, _ = constructive_deuring(I, E0, iota, p)

print(E1)
print(phi(P))
print(phi(Q))
