#include <NTL/ZZ.h>
#include <NTL/ZZ_pE.h>
#include <NTL/ZZ_pEX.h>
#include <NTL/ZZ_pX.h>
#include <NTL/ZZ_pEXFactoring.h>
#include <NTL/ZZ_pXFactoring.h>
#include <iostream>
#include <vector>


#include "Fp2k.hpp"
#include "ec.hpp"
#include "ecp.hpp"
#include "isog.hpp"
#include "utils.hpp"
#include "quaternions.hpp"
#include "id2iso.hpp"

#include <cassert>

void test_id2iso() {
    std::cout << "Testing ideal 2 isogeny translation" << std::endl;

    //512
    //NTL::ZZ p = NTL::conv<NTL::ZZ>("167286323857221689112346016933207258999493176647479781908348180838625562682489086996433613891517156716513168813389511283523303877305870043625319556074092350622078682027926127121250390130545025689333161800187261717666012808114506310888652381411304126074312458239");
    NTL::ZZ p = NTL::conv<NTL::ZZ>("23771452727449498898004557547225354988120021364701398066313318892838230235651289792849929330578203612228877729959916570183072595360843544888617115522542149031138111127294471888062615222219308670025415410876727090874823170475481539518868548152615795234974491096957906735993259268864790983747139027153544490397993988855511337575848418797409297084369809840481360670399419714736596634148006572830334348569025487101216814643806207");

    NTL::ZZ_p::init(p);
    NTL::ZZ_pX f;
    SetCoeff(f, 2);
    f[0] = NTL::ZZ_p(1);
    NTL::ZZ_pE::init(f);

    std::map<unsigned,Fp2k> Fexts;

    //512
    //std::array<unsigned, 9> ks {1, 4, 5, 7, 11, 12, 17, 21, 46};

    //1536
    std::array<unsigned, 12> ks {1, 2, 3, 4, 6, 8, 10, 13, 15, 18, 20, 28};

    for (unsigned k : ks) {
        size_t t0 = time(NULL);
        Fexts.emplace(std::make_pair(k, Fp2k {k}));
        std::cout << "\n~~~~ constructing ext deg " << k << " took " << (time(NULL)-t0) << "s) ~~~~~" << std::endl;
    }
    NTL::ZZ_pE a(1);
    NTL::ZZ_pE b(0);

    ec E0(a, b);

    //512
    // I start
    /*NTL::ZZ N = NTL::conv<NTL::ZZ>("9038335303594905702432523481381769418319221840032754827793305565746663241668668234659306370617473264464539876682584061379516693108420201050690520555231896565997074231991257847875423784141061025");
    std::array<NTL::ZZ, 5> coeffs {NTL::conv<NTL::ZZ>("1771"), NTL::conv<NTL::ZZ>("1600"), NTL::conv<NTL::ZZ>("19002360031283404467522092618308802347470485961353898703877094834350805517941679634830973780397092382516818371098031397222415853714069860086436340971995987825763383643048730625985935748882270713455"), NTL::conv<NTL::ZZ>("-12550164474789516716280075903580495319698157286536572929643802821563832079698195289834038447632401304048988505145963797460727466993891611619239352654386467941631165271197099198198865752892533875759"), NTL::conv<NTL::ZZ>("1")};
    quatalg alg {p, NTL::ZZ(1)};
    quat alpha(coeffs, alg);

    // I_1
    NTL::ZZ N_1 = NTL::conv<NTL::ZZ>("115792089237316195423570985008687907853269984665640564039457584007913129639936");
    std::array<NTL::ZZ, 5> coeffs_1 {NTL::conv<NTL::ZZ>("-11"), NTL::conv<NTL::ZZ>("1032"), NTL::conv<NTL::ZZ>("57544615566817726889663472146784605413158552206493692855873318759787255265323917"), NTL::conv<NTL::ZZ>("1080228712516085617822692956216700957304024004273948580612613688749446338090708444"), NTL::conv<NTL::ZZ>("1")};
    quat alpha_1(coeffs_1, alg);

    // I_2
    NTL::ZZ N_2 = NTL::conv<NTL::ZZ>("115792089237316195423570985008687907853269984665640564039457584007913129639936");
    std::array<NTL::ZZ, 5> coeffs_2 {NTL::conv<NTL::ZZ>("-2910"), NTL::conv<NTL::ZZ>("-7855"), NTL::conv<NTL::ZZ>("-157405956862230990602885858582332374295305959480518979227287209540487891188580658"), NTL::conv<NTL::ZZ>("-1920115441739445214132279152431487854108921073159320704759330152845546074820933041"), NTL::conv<NTL::ZZ>("1")};
    quat alpha_2(coeffs_2, alg); */

    //1536
    NTL::ZZ N = NTL::conv<NTL::ZZ>("196339001293561992728672040823943491714476909401234086895642935399847046066372271035750681511676039735710258536700155686920991866545323832220829330107461704354844604742814918321292912805855304650407725");
    std::array<NTL::ZZ, 5> coeffs {NTL::conv<NTL::ZZ>("9519"), NTL::conv<NTL::ZZ>("823"), NTL::conv<NTL::ZZ>("-26955949077673557359305289901474351893268769462518733664093998896778921498592422266984367523534155227359719229299181491593350003862550717451005794793462794182952441668161612937479879843289258645425442402540725163394534885301756147969"), NTL::conv<NTL::ZZ>("-31613853862978002171534168258581775370710160905648164706006244551028930839603122003271502954014517140374050183000871358884340994866893666089279534510291194662195631754612744240418061013857922294552817512620999356136761284660504903705"), NTL::conv<NTL::ZZ>("2")};
    quatalg alg {p, NTL::ZZ(1)};
    quat alpha(coeffs, alg);

    // I_1
    NTL::ZZ N_1 = NTL::conv<NTL::ZZ>("24258095192198577111702804507226602425888844017448384549047688094157046135724638848919975137947601217976370792142673018846430938189293974866316988672518455300069609000325779774222895087993725700394734362401819824232700732090875904");
    std::array<NTL::ZZ, 5> coeffs_1 {NTL::conv<NTL::ZZ>("-7845"), NTL::conv<NTL::ZZ>("9675"), NTL::conv<NTL::ZZ>("-106988354724400328935722882754779977170137437844042984352252221886664438657108284840722413929766137876124809208842902249224873849324031319388184893374595272503710691037866188243669552501998941953920173050805402930953046928541791105237"), NTL::conv<NTL::ZZ>("-347173295843485545677838326684015091554965135335620259661478995925667909633342687570601050732876792764442847439461282118111983686680918257831957931172204606485682556327820486426302101005985170110289769853501532968838472209972357816837"), NTL::conv<NTL::ZZ>("2")};
    quat alpha_1(coeffs_1, alg);

    // I_2
    NTL::ZZ N_2 = NTL::conv<NTL::ZZ>("24258095192198577111702804507226602425888844017448384549047688094157046135724638848919975137947601217976370792142673018846430938189293974866316988672518455300069609000325779774222895087993725700394734362401819824232700732090875904");
    std::array<NTL::ZZ, 5> coeffs_2 {NTL::conv<NTL::ZZ>("9519"), NTL::conv<NTL::ZZ>("823"), NTL::conv<NTL::ZZ>("-26955949077673557359305289901474351893268769462518733664093998896778921498592422266984367523534155227359719229299181491593350003862550717451005794793462794182952441668161612937479879843289258645425442402540725163394534885301756147969"), NTL::conv<NTL::ZZ>("-31613853862978002171534168258581775370710160905648164706006244551028930839603122003271502954014517140374050183000871358884340994866893666089279534510291194662195631754612744240418061013857922294552817512620999356136761284660504903705"), NTL::conv<NTL::ZZ>("2")};
    quat alpha_2(coeffs_2, alg);
    
    std::cout << alpha << std::endl;
    std::cout << alpha.conjugate() << std::endl;

    std::map<NTL::ZZ,std::pair<ecp,ecp>> bases;
    
    std::cout << "E_0: " << E0 << std::endl;
    auto kerGens_1 = idealToKernel(alpha_1, N_1, E0, Fexts, bases);

    ecp P = E0.random_point(Fexts.at(1));
    ecp Q = E0.random_point(Fexts.at(1));
    for (auto Ple : kerGens_1) {
        P = E0(Fexts.at(1), coerce(Ple.first.aff_x(), Fexts.at(2)), coerce(Ple.first.aff_y(), Fexts.at(2)));
        std::cout << "P (on E0): " << P << std::endl;
    }
    auto kerGens_2 = idealToKernel(alpha_2, N_2, E0, Fexts, bases);
    for (auto Ple : kerGens_2) {
        Q = E0(Fexts.at(1), coerce(Ple.first.aff_x(), Fexts.at(2)), coerce(Ple.first.aff_y(), Fexts.at(2)));
        std::cout << "Q (on E0): " << Q << std::endl;
    }

    isog_chain phi_I = idealToIsogeny(alpha, N, E0, Fexts, bases);
    ec E_I = phi_I.get_codomain();
    std::cout << "E_I: " << E_I << std::endl;
    std::cout << "j(E_I): " << E_I.j_invariant() << std::endl;

    ecp P0 = phi_I(P);
    ecp Q0 = phi_I(Q);
    P0.normalize();
    Q0.normalize();
    std::cout << "P0 (on E_I): " << P0 << std::endl;
    std::cout << "Q0 (on E_I): " << Q0 << std::endl;

    std::cout << "  > Test passed!" << std::endl;
}

int main()
{
    test_id2iso();
    return 0;
}
