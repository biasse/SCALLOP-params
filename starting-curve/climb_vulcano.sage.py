

# This file was *autogenerated* from the file climb_vulcano.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1000 = Integer(1000); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_817 = Integer(817); _sage_const_22711775683133590811692237376342429238176828137256920271016701278225953126746258369874072200439826127375102732028076826684141799893454573890942633774296721382453081077340536135990593000334249 = Integer(22711775683133590811692237376342429238176828137256920271016701278225953126746258369874072200439826127375102732028076826684141799893454573890942633774296721382453081077340536135990593000334249); _sage_const_2 = Integer(2); _sage_const_518 = Integer(518); _sage_const_810544624661213367964996895060809843164181099028487384400155560066253019789927 = Integer(810544624661213367964996895060809843164181099028487384400155560066253019789927); _sage_const_945648148713467501094696962403454233607167517444788408618448739064461646654337307344171931120486640510821138175364584 = Integer(945648148713467501094696962403454233607167517444788408618448739064461646654337307344171931120486640510821138175364584); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_7 = Integer(7); _sage_const_11 = Integer(11); _sage_const_13 = Integer(13); _sage_const_17 = Integer(17); _sage_const_19 = Integer(19); _sage_const_23 = Integer(23); _sage_const_29 = Integer(29); _sage_const_31 = Integer(31); _sage_const_37 = Integer(37); _sage_const_41 = Integer(41); _sage_const_43 = Integer(43); _sage_const_47 = Integer(47); _sage_const_53 = Integer(53); _sage_const_61 = Integer(61); _sage_const_71 = Integer(71); _sage_const_73 = Integer(73); _sage_const_79 = Integer(79); _sage_const_89 = Integer(89); _sage_const_97 = Integer(97); _sage_const_137 = Integer(137); _sage_const_139 = Integer(139); _sage_const_151 = Integer(151); _sage_const_163 = Integer(163); _sage_const_167 = Integer(167); _sage_const_181 = Integer(181); _sage_const_193 = Integer(193); _sage_const_199 = Integer(199); _sage_const_223 = Integer(223); _sage_const_239 = Integer(239); _sage_const_241 = Integer(241); _sage_const_257 = Integer(257); _sage_const_281 = Integer(281); _sage_const_311 = Integer(311); _sage_const_317 = Integer(317); _sage_const_331 = Integer(331); _sage_const_349 = Integer(349); _sage_const_353 = Integer(353); _sage_const_367 = Integer(367); _sage_const_373 = Integer(373); _sage_const_397 = Integer(397); _sage_const_401 = Integer(401); _sage_const_409 = Integer(409); _sage_const_419 = Integer(419); _sage_const_421 = Integer(421); _sage_const_433 = Integer(433); _sage_const_457 = Integer(457); _sage_const_461 = Integer(461); _sage_const_463 = Integer(463); _sage_const_487 = Integer(487); _sage_const_499 = Integer(499); _sage_const_509 = Integer(509); _sage_const_541 = Integer(541); _sage_const_547 = Integer(547); _sage_const_569 = Integer(569); _sage_const_571 = Integer(571); _sage_const_577 = Integer(577); _sage_const_587 = Integer(587); _sage_const_593 = Integer(593); _sage_const_617 = Integer(617); _sage_const_619 = Integer(619); _sage_const_631 = Integer(631); _sage_const_641 = Integer(641); _sage_const_659 = Integer(659); _sage_const_691 = Integer(691); _sage_const_719 = Integer(719); _sage_const_727 = Integer(727); _sage_const_739 = Integer(739); _sage_const_743 = Integer(743); _sage_const_751 = Integer(751); _sage_const_757 = Integer(757); _sage_const_761 = Integer(761); _sage_const_773 = Integer(773); _sage_const_787 = Integer(787); _sage_const_797 = Integer(797); _sage_const_827 = Integer(827); _sage_const_829 = Integer(829); _sage_const_853 = Integer(853); _sage_const_857 = Integer(857); _sage_const_863 = Integer(863); _sage_const_881 = Integer(881); _sage_const_941 = Integer(941); _sage_const_953 = Integer(953); _sage_const_967 = Integer(967); _sage_const_971 = Integer(971); _sage_const_100000 = Integer(100000)
def Cornacchia(QF, m):
    m_prime = prod([l**e for l, e in factor(m, limit=_sage_const_1000 ) if l < _sage_const_1000 ])
    if not is_pseudoprime(m/m_prime):
        return None, None, False
    print("Potential solution??")
    sol = QF.solve_integer(m)
    if not sol:
        return None, None, False
    return sol[_sage_const_0 ], sol[_sage_const_1 ], True


if __name__=="__main__":
    f = Integer(_sage_const_817 )
    N = Integer(_sage_const_22711775683133590811692237376342429238176828137256920271016701278225953126746258369874072200439826127375102732028076826684141799893454573890942633774296721382453081077340536135990593000334249 )
    p = Integer(_sage_const_2 )**_sage_const_518 *f*N - _sage_const_1 

    d = _sage_const_810544624661213367964996895060809843164181099028487384400155560066253019789927 
    conductor = _sage_const_945648148713467501094696962403454233607167517444788408618448739064461646654337307344171931120486640510821138175364584 

    B = QuaternionAlgebra(-_sage_const_1 , -p)
    i, j, k = B.gens()
    O0 = B.quaternion_order([_sage_const_1 , i, (i+j)/_sage_const_2 , (_sage_const_1 +k)/_sage_const_2 ])
    
    Z_p = Integers(p)
    Bound = _sage_const_1000 

    qf = BinaryQF([_sage_const_1 , _sage_const_0 , _sage_const_1 ])

    omega = None

    # Chosen torsion from precompute
    fullG = _sage_const_3  * _sage_const_5 **_sage_const_3  * _sage_const_7 **_sage_const_2  * _sage_const_11 **_sage_const_3  * _sage_const_13 **_sage_const_2  * _sage_const_17  * _sage_const_19  * _sage_const_23  * _sage_const_29  * _sage_const_31  * _sage_const_37  * _sage_const_41  * _sage_const_43  * _sage_const_47  * _sage_const_53  * _sage_const_61  * _sage_const_71  * _sage_const_73  * _sage_const_79  * _sage_const_89  * _sage_const_97  * _sage_const_137  * _sage_const_139  * _sage_const_151  * _sage_const_163  * _sage_const_167  * _sage_const_181  * _sage_const_193  * _sage_const_199  * _sage_const_223  * _sage_const_239  * _sage_const_241  * _sage_const_257  * _sage_const_281  * _sage_const_311  * _sage_const_317  * _sage_const_331  * _sage_const_349  * _sage_const_353  * _sage_const_367  * _sage_const_373  * _sage_const_397  * _sage_const_401  * _sage_const_409  * _sage_const_419  * _sage_const_421  * _sage_const_433  * _sage_const_457  * _sage_const_461  * _sage_const_463  * _sage_const_487  * _sage_const_499  * _sage_const_509  * _sage_const_541  * _sage_const_547  * _sage_const_569  * _sage_const_571  * _sage_const_577  * _sage_const_587  * _sage_const_593  * _sage_const_617  * _sage_const_619  * _sage_const_631  * _sage_const_641  * _sage_const_659  * _sage_const_691  * _sage_const_719  * _sage_const_727  * _sage_const_739  * _sage_const_743  * _sage_const_751  * _sage_const_757  * _sage_const_761  * _sage_const_773  * _sage_const_787  * _sage_const_797  * _sage_const_827  * _sage_const_829  * _sage_const_853  * _sage_const_857  * _sage_const_863  * _sage_const_881  * _sage_const_941  * _sage_const_953  * _sage_const_967  * _sage_const_971 

    for div in range(_sage_const_1 , _sage_const_100000 ):
        if (fullG) % div != _sage_const_0 :
            continue
        path = (fullG)/div
        n = d*(conductor*path)**_sage_const_2 
        print(RR(log(n, p)))
        rts = [ZZ(r) for r in Z_p(n).sqrt(all=True)]
        for x in rts:
            M = ZZ((n - x**_sage_const_2 )/p)
            print(M)
            y, z, sol = Cornacchia(qf, M)
            if sol:
                print("We got it!!!")
                omega = x*i + y*j + z*k
                break
        if omega:
            break
    
    I = O0*path + O0*omega


    print(I)
    print(RR(log(I.norm(), p)))
    assert omega/path in I.right_order()
    print(omega/path)
    

