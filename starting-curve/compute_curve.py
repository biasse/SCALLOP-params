from klpt import *
from id2iso import *
from param_loader import load

params = load('75-primes')
p = params['p']
F = params['F']
f = params['f']
D_com = params['D_com']
D_chall = params['D_chall']
T = params['T']
B_2 = params['B_2']
B_chall = params['B_chall']
facToExt = params['facToExt']
facToBasis = params['facToBasis']
facToAction = params['facToAction']
small_ns = params['small_ns']
small_s = params['small_s']

B = QuaternionAlgebra(-1, -p)
i, j, k = B.gens()
O0 = B.quaternion_order([1, i, (i+j)/2, (1+k)/2])
I = O0.left_ideal((Integer(1)/Integer(2) + Integer(6865540508547025332104720678441732964639649792451138786085062977622363395618749658135577054992774287384378173294951622388525288433112068993559463461931188123976543811748840925663325955729437893641977829336065)*j + Integer(26342302564698167314930519503107130270228401779007734840833191927093891627159820514156457139606375388656837807663354383045530250311730782577191161918160126016957773987771495345011008566314353986324717395366107)/Integer(2)*k, Integer(1)/Integer(2)*i + Integer(18184725766999473358763199954799065410007651507864451846916965951916688883044470430262568157542816315011748409723996941182879248671588289558764230051564553051599308225504715981544190947804283271846092613494643)/Integer(2)*j + Integer(6865540508547025332104720678441732964639649792451138786085062977622363395618749658135577054992774287384378173294951622388525288433112068993559463461931188123976543811748840925663325955729437893641977829336065)*k, Integer(22263514165848820336846859728953097840118026643436093343875078939505290255102145472209512648574595851834293108693675662114204749491659536067977695984862339534278541106638105663277599757059318629085405004430375)*j, Integer(22263514165848820336846859728953097840118026643436093343875078939505290255102145472209512648574595851834293108693675662114204749491659536067977695984862339534278541106638105663277599757059318629085405004430375)*k))
O_start = I.right_order()
delta = Integer(9351018666544679287033869583190125720227508540571305953020333166628971784137540290569276764140615998909672623521880908802110556279609753700901571424648001092421943567086358466697101499386738345792495946905910904556448921877769315947746665800572134772850684357645179413674738323704992042608018340302962490582937558697170972769119983174356443820269289)/Integer(22263514165848820336846859728953097840118026643436093343875078939505290255102145472209512648574595851834293108693675662114204749491659536067977695984862339534278541106638105663277599757059318629085405004430375)*i + Integer(3518955035841202786427981095823831703115733155539847079691926793563731796602819240928976896604235762992017351565727914992329306360350856832175072067119555079282898725719485908096335827)/Integer(17793004094181599324873154729908785559506467242332748060840773705279987992099223474913916271455204312990993101059400281889249039154941363537753573012019442569299477967760349972369732177684028727318024125)*j - Integer(356458410570023279942174279420769375492500019664142622572199705664982585542401007914945172926631248739559079702874002376757765989760792413390244613825189003388542051375097436524504786559536)/Integer(4452702833169764067369371945790619568023605328687218668775015787901058051020429094441902529714919170366858621738735132422840949898331907213595539196972467906855708221327621132655519951411863725817081000886075)*k
assert delta in O_start
omega = Integer(107262463439540776796592199985616134275233279428307433766342950569669432214610248132438916680001426895938208196632896833496294702258913582339408834412325768) - delta
print(f"omega norm: {omega.reduced_norm()}")
print(f"factored: {factor(omega.reduced_norm())}")
assert omega in O_start
I_omega_half1 = O_start*omega + O_start*2**518
I_omega_half2 = O_start*omega.conjugate() + O_start*2**518


E0 = EllipticCurve(F, [1,0])
phi_start = IdealToIsogeny(O0, I, E0, facToBasis, facToAction)

E_start = phi_start.codomain()

K_1 = IdealToIsogenyGens(O0, pullback(I, I_omega_half1), E0, facToBasis, facToAction)
K_2 = IdealToIsogenyGens(O0, pullback(I, I_omega_half2), E0, facToBasis, facToAction)


print("Got the gens on E_0")
print(K_1, K_2)

K_1 = E0.lift_x(K_1[0][0].X)
K_2 = E0.lift_x(K_2[0][0].X)
K_1 = phi_start(K_1)
K_2 = phi_start(K_2)

print("All done!")
print("Starting curve:")
print(E_start)
print("Effective orientation:")
print(K_1)
print(K_2)